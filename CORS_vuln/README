CORS_vuln:
    CORS insecure methods can be found in app.cors.
    These methods were designed insecurely on purpose,
    when indicating solutions, refer which method is more secure
    (reflect is the least secure). For better security whitelists
    should be tighter, including regex.

    Cross-site scripting (XSS) via CORS:

            Create static html page which is susceptible 
            to XSS. The static html page must allow inline/normal 
            js input as a GET or POST. The attacker then
            inserts malicious requests to the API as js in the input.

                # Directory Transversal: Simply downloads files (Attacker-->get env variables, jwt secret key)
                #   Query Arg: filename
                #   Insecure - Doesnt verify file ext
                #   Secure - Verify file ext or directory ext (regex,..)
    
         CORS             JS
    API  ----   static   ----  A
     |
    WS
     |
     C

             --> Should only get user info: Post Count
            /
    A <--> Static <-> API requests
       JS    

    Attacker Goal: Get POSTS from user (public/private)
    Content-Security-Policy (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy)
                            (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection)

    (https://github.com/ShiftLeftSecurity/flask-webgoat)

    ---

    TODO: static_xss.html -> download api files, attacker goal: get auth files (private key)